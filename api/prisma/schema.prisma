generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// WEPAW8wCAkRDcLLd

// user model =============================================================
model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  username  String     @unique
  password  String
  avatar    String?
  roles     String[]   @default(["User"])
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  cartItems CartItem[]
  ratings   Rating[] // one to many
  wishlist  Wishlist[]
}

// product model
model Product {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Float
  category        String
  likes           Int
  trendy          Boolean          @default(false)
  title           String
  description     String
  images          String[]
  stock           Int
  features        String[]
  offers          String[]
  details         Detail[]
  dimensions      Dimension[]
  techData        Tech[]
  // for info component
  materialDetails MaterialDetail[]
  resistance      Resistance?
  additionalInfo  String?
  careTips        CareTip[]
  packing         String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cartItem        CartItem[]
  ratings         Rating[]
  productRating   ProductRating? // one to one
  wishItem        Wishlist[]
}

type Detail {
  name        String?
  description String?
}

type Dimension {
  name String?
  dim  String?
}

type MaterialDetail {
  name        String?
  description String[]
}

type Resistance {
  resistFrom String[]
  resistDesc String?
}

type CareTip {
  tip  String?
  list String[]
}

type Tech {
  name String?
  data String?
}

// cart item model
model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// single rating model
model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      @default(0) // rating 1-5
  comment   String? // optional comment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  // user can rate a product only once
  @@unique([userId, productId])
  // indexes for optimization
  @@index([userId])
  @@index([productId])
}

// model of product rating
model ProductRating {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  averageRating Float    @default(0)
  totalRatings  Int      @default(0)
  fiveStars     Int      @default(0)
  fourStars     Int      @default(0)
  threeStars    Int      @default(0)
  twoStars      Int      @default(0)
  oneStar       Int      @default(0)
  updatedAt     DateTime @updatedAt

  // relation 1:1 with product
  productId String  @unique @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

// model of wishlist item of user
model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation many to many with user
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
